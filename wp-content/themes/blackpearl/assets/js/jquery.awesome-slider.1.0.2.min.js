/*
	Awesome Slider - Responsive Object/Background Slider
 	Copyright (c) 2011-12 Mohsen Heydari
	http://themeforest.net/user/PixFlow
	
	Version: 1.0.2
*/

(function ($) {
    var defaults = { delay: 5000, itemsAnimateInSpeed: 500, bgFadeInSpeed: 700, bgFadeOutSpeed: 700, itemsAnimateOutSpeed: 1500, ignoreTouchBehaviorOn: 'link_button' }; var utility = { ExtractCSSBgImage: function (cssBgImg) { return cssBgImg.replace(/"/g, "").replace(/url\(|\)$/ig, ""); }, ExtractFloat: function (val) { var n = parseFloat(val); return n == null || isNaN(n) ? 0.0 : n; }, ExtractInt: function (val) { var n = parseInt(val); return n == null || isNaN(n) ? 0 : n; }, HasAttr: function ($elm, attr) { return typeof $elm.attr(attr) != 'undefined'; }, HasProp: function ($elm, prop) { return typeof $elm.prop(prop) != 'undefined'; }, SetImageDimentionsAsDataAttr: function ($img, w, h) { $img.attr('data-width', w); $img.attr('data-height', h); $img.attr('data-aspectratio', w / h); }, CreateImg: function () { return $("<img/>"); }, GetItemHeight: function ($item) { if (this.HasAttr($item, 'data-height')) return this.ExtractInt($item.attr('data-height')); else if (this.HasProp($item, 'height')) return this.ExtractInt($item.prop('height')); else if (this.HasAttr($item, 'height')) return this.ExtractInt($item.attr('height')); return $item.height(); }, GetItemWidth: function ($item) { if (this.HasAttr($item, 'data-width')) return this.ExtractInt($item.attr('data-width')); else if (this.HasProp($item, 'width')) return this.ExtractInt($item.prop('width')); else if (this.HasAttr($item, 'width')) return this.ExtractInt($item.attr('width')); return $item.width(); }, IsIframe: function ($item) { return $item.length ? $item[0].nodeName.toLowerCase() == 'iframe' : false; } }; function Initialize(options) {
        var $window = $(window), $document = $(document), $slider = this, curSlide = { playState: 1 }, timerId = 0, $dragTarget = null, startPos = { x: 0, y: 0 }, pointerPos = { x: 0, y: 0 }, onselectstart = null, ondragstart = null, isTouchDevice = 'ontouchstart' in window, userAgent = navigator.userAgent.toLowerCase(), isAndroid = userAgent.indexOf("android") > -1, firstMoveEvt = false, allowMove = false; $slider.addClass('slider-container'); PrepareSlideItems(); HandleTransitions(0); $window.resize(function () { clearTimeout(timerId); timerId = setTimeout(HandleResize, 100); }); function HandleResize() { $slider.find('.slide').each(function () { AdjustSlideItemSize($(this)); AdjustSlideBg($(this)); }); } if (isTouchDevice) { $('html').bind('touchstart', HandleHitStart); $('html').bind('touchmove', HandlePointerMovement); $('html').bind('touchend', HandleHitEnd); } else { $document.mousedown(HandleHitStart); $document.mousemove(HandlePointerMovement); $document.mouseup(HandleHitEnd); } function HandleHitStart(e) { if (!isTouchDevice && e.button != 0) return; var event = {}; event.target = isTouchDevice ? e.originalEvent.touches[0].target : e.target; event.pageX = isTouchDevice ? e.originalEvent.touches[0].pageX : e.pageX; event.pageY = isTouchDevice ? e.originalEvent.touches[0].pageY : e.pageY; $temp = $(event.target); if (!$slider.find($temp).length || $temp.hasClass(options.ignoreTouchBehaviorOn)) return; $dragTarget = $temp; pointerPos.x = startPos.x = event.pageX; pointerPos.y = startPos.y = event.pageY; if (!isTouchDevice) { document.body.focus(); onselectstart = document.onselectstart; ondragstart = e.target.ondragstart; document.onselectstart = function () { return false; }; e.target.ondragstart = function () { return false; }; e.preventDefault(); } firstMoveEvt = true; } function HandlePointerMovement(e) { if ($dragTarget == null) return; var event = {}; event.pageX = isTouchDevice ? window.event.touches[0].pageX : e.pageX; event.pageY = isTouchDevice ? window.event.touches[0].pageY : e.pageY; pointerPos = { x: event.pageX, y: event.pageY }; if (firstMoveEvt) { var vec = { x: pointerPos.x - startPos.x, y: pointerPos.y - startPos.y }; len = Math.sqrt(vec.x * vec.x + vec.y * vec.y), angle = vec.x / len; if (angle > 0.707 || angle < -0.707) allowMove = true; firstMoveEvt = false; } if (isAndroid && allowMove) { e.preventDefault(); } } function HandleHitEnd(e) { if ($dragTarget == null) return; $dragTarget = null; var dir = { x: pointerPos.x - startPos.x, y: pointerPos.y - startPos.y }; if (allowMove) { if (dir.x > 0) { curSlide.prev(); } else if (dir.x < 0) { curSlide.next(); } } if (!isTouchDevice) { document.onselectstart = onselectstart; e.target.ondragstart = ondragstart; } allowMove = false; } function PrepareSlideItems() {
            $slider.find('.slide').hide().eq(0).addClass('current-slide').show(); $slider.find('.slide-item > img, .slide-bg > img').each(function () { var $img = $(this); var src = $img.attr("src") + "?date=" + new Date().getTime(); utility.CreateImg().load(function () { utility.SetImageDimentionsAsDataAttr($img, this.width, this.height); OnImageLoad.call($img); }).attr('src', src); }); var youtubeVids = [], $iframes = $slider.find('.slide-item > iframe'); $iframes.each(function () {
                var $player = $(this), src = $player.attr('src'), type = 'unknown'; $player.attr('data-width', $player.prop('width')).prop('width', 0).attr('data-height', $player.prop('height')).prop('height', 0); AdjustSlideItemSize($player.parents('.slide')); if (src.lastIndexOf('vimeo') > -1) type = 'vimeo'; else if (src.lastIndexOf('youtube') > -1) type = 'youtube'; else
                    return; $player.attr('data-type', type); if (type == 'vimeo') { AttachVideoEvents(this, type); } else if (type == 'youtube') { youtubeVids[youtubeVids.length] = this; }
            }); if (youtubeVids.length) { $.getScript('http://www.youtube.com/iframe_api', function () { var attemp = 0, timer = null; timer = setInterval(function () { attemp++; if (attemp > 10000) clearInterval(timer); if (typeof YT.Player == 'undefined') return; for (i = 0; i < youtubeVids.length; i++) AttachVideoEvents(youtubeVids[i], 'youtube'); clearInterval(timer); }, 100); }); }
        } function AttachVideoEvents(iframe, type) {
            if (type == 'vimeo') { var player = $f(iframe); player.addEvent('ready', function () { player.addEvent('finish', onPlayerStop); player.addEvent('pause', onPlayerStop); player.addEvent('play', onPlayerStart); }); } else
            { var $player = $(iframe), player = new YT.Player($player.attr('id'), { events: { 'onStateChange': function (event) { if (event.data == YT.PlayerState.PLAYING) { onPlayerStart(); } else if (event.data == YT.PlayerState.PAUSED || event.data == YT.PlayerState.ENDED) { onPlayerStop(); } } } }); } function onPlayerStart() { curSlide.pause(); } function onPlayerStop() { curSlide.play(); }
        } function OnImageLoad() { var $slide = this.parents('.slide'); this.css({ maxWidth: 'none', display: 'block' }); if (this.parents('.slide-bg').length) { AdjustSlideBg($slide); } else if (this.parents('.slide-item').length) { AdjustSlideItemSize($slide); } } function AdjustSlideItemSize($slide) {
            var $item = $slide.find('.slide-item > img,.slide-item > iframe'); if ($item.length < 1) return; var isVideo = $item[0].nodeName.toLowerCase() == 'iframe'; if (!$slide.hasClass('current-slide')) $slide.show(); var $parent = $item.parent(), parentW = $parent.width(), parentH = $parent.height(), parentRatio = parentW / parentH, w = utility.GetItemWidth($item), h = utility.GetItemHeight($item), ratio = w / h; if (w <= parentW && h <= parentH) {
                if (isVideo) $item.prop('width', w).prop('height', h); else
                    $item.width(w).height(h);
            } else if (ratio > parentRatio) {
                if (isVideo) $item.prop('width', parentW).prop('height', Math.round(parentW / ratio)); else
                    $item.width(parentW).height(Math.round(parentW / ratio));
            } else {
                if (isVideo) $item.prop('width', Math.round(parentH * ratio)).prop('height', parentH); else
                    $item.width(Math.round(parentH * ratio)).height(parentH);
            } AdjustItemVerticalPos($item); if (!$slide.hasClass('current-slide')) $slide.hide();
        } function AdjustSlideBg($slide) { var $img = $slide.find('.slide-bg > img'); if ($img.length < 1) return; if (!$slide.hasClass('current-slide')) $slide.show(); var sliderW = $slider.width(); sliderH = $slider.height(), imgRatio = utility.ExtractFloat($img.attr('data-aspectratio')), sliderRatio = sliderW / sliderH; if (imgRatio > sliderRatio) { var w = sliderH * imgRatio; var left = (w - sliderW) * 0.5; $img.css({ width: 'auto', height: sliderH, left: -Math.ceil(left), top: 0 }); } else { var top = ((sliderW / imgRatio) - sliderH) * 0.5; $img.css({ width: sliderW, height: 'auto', left: 0, top: -Math.ceil(top) }); } if (!$slide.hasClass('current-slide')) $slide.hide(); } function HandleTransitions(index) {
            var $slides = $slider.find('.slide'); curSlide.object = $slides.eq(index); curSlide.state = 0; curSlide.skipDelay = 0; curSlide.goToPrev = 0; curSlide.delayTimer = null; curSlide.getNextSlideIndex = function (prev) { var curIndex = curSlide.object.index(); if (prev) { if (!curIndex) { return $slides.length - 1; } else { return curIndex - 1; } } else { if (curIndex + 1 == $slides.length) { return 0; } else { return curIndex + 1; } } }; curSlide.pause = function () { if (curSlide.delayTimer) clearTimeout(curSlide.delayTimer); curSlide.playState = 0; }; curSlide.play = function () { if (curSlide.playState) return; curSlide.playState = 1; if ($slides.length > 1) curSlide.step(); }; curSlide.next = function () { if ($slides.length < 2) return; if (curSlide.state == 2 && curSlide.playState == 0) { curSlide.state++; curSlide.step(); return; } if (curSlide.state == 3) { clearTimeout(curSlide.delayTimer); curSlide.step(); } else { curSlide.skipDelay = 1; } }; curSlide.prev = function () { if ($slides.length < 2) return; curSlide.goToPrev = 1; if (curSlide.state == 2 && curSlide.playState == 0) { curSlide.state++; curSlide.step(); return; } if (curSlide.state == 3) { clearTimeout(curSlide.delayTimer); curSlide.step(); } else { curSlide.skipDelay = 1; } }; curSlide.step = function () {
                switch (curSlide.state) {
                    case 0: { PrepareSlide(curSlide.object); curSlide.state++; curSlide.step(); return; } break; case 1: { var step = $slides.length > 1 ? curSlide.step : function () { }; AnimateIn(curSlide.object, step); } break; case 2: {
                        if (!curSlide.playState) return; if (curSlide.skipDelay) { curSlide.state++; curSlide.step(); return; } else
                            curSlide.delayTimer = setTimeout(curSlide.step, options.delay);
                    } break; case 3: { AnimateOut(curSlide.object, curSlide.step); } break; case 4: { curSlide.state = 0; curSlide.object.removeClass('current-slide'); HandleTransitions(curSlide.getNextSlideIndex(curSlide.goToPrev)); return; } break;
                } curSlide.state++;
            }; curSlide.step();
        } function AdjustItemVerticalPos($item) { var $slide = $item.parents('.slide'), $parent = $item.parent(), isVideo = utility.IsIframe($item), itemH = $item.height(); if (!isVideo) { if (!itemH && utility.HasAttr($item, 'data-height')) itemH = utility.ExtractInt($item.attr('height')); else if (!utility.HasAttr($item, 'data-height') && itemH) { AdjustSlideItemSize($slide); itemH = utility.ExtractInt($item.css('height')); } } var tp = ($parent.height() - itemH) * 0.5; tp = Math.floor(tp); $item.css({ top: tp }); } function PrepareSlide($slide) { $slide.show().addClass('current-slide'); var $item = $slide.find('.slide-item > img,.slide-item > iframe'), $parent = $item.parent(), isVideo = utility.IsIframe($item), $meta = $slide.find('.slide-meta .meta'), $bg = $slide.find('.slide-bg'), tp = 0; var prop = { position: 'absolute', left: $parent.width() }; if (isVideo && isAndroid) { delete prop.left; } else if (isVideo && !isAndroid) { $item.show(); } $item.css(prop); if (!isVideo) $item.css({ opacity: 1 }); tp = ($meta.parent().height() - $meta.height()) * 0.5; var w = $meta.outerWidth(); $meta.css({ position: 'absolute', left: -w, top: tp, opacity: 1 }); $bg.css({ opacity: 0 }); } function AnimateIn($slide, onComplete) {
            var $item = $slide.find('.slide-item > img,.slide-item > iframe'), $parent = $item.parent(), isVideo = utility.IsIframe($item); $meta = $slide.find('.slide-meta .meta'), $bg = $slide.find('.slide-bg'), width = $item.width(), itemLeft = Math.floor(($parent.width() - width) * 0.5), metaLeft = Math.floor(($meta.parent().width() - $meta.outerWidth()) * 0.5); if ($bg.length > 0) { $bg.animate({ opacity: 1 }, { duration: options.bgFadeInSpeed, complete: AnimateItems }); } else { AnimateItems(); } function AnimateItems() {
                if (typeof onComplete == 'undefined') onComplete = function () { }; if (isVideo && isAndroid) $item.css({ left: itemLeft }).show(); else
                    $item.animate({ left: itemLeft }, { duration: options.itemsAnimateInSpeed, easing: 'easeOutQuad' }); $meta.animate({ left: metaLeft }, { duration: options.itemsAnimateInSpeed, easing: 'easeOutQuad', complete: onComplete });
            }
        } function AnimateOut($slide, onComplete) {
            var $item = $slide.find('.slide-item > img,.slide-item > iframe'), isVideo = utility.IsIframe($item); $bg = $slide.find('.slide-bg'), $meta = $slide.find('.slide-meta .meta'), itemOffsetX = ($slide.width() - $item.parent().width()) + $item.width(), width = $meta.outerWidth(), metaOffsetX = ($slide.width() - $meta.parent().width()) + width, itemAnimSettings = { duration: options.itemsAnimateOutSpeed, easing: 'easeOutQuad' }; if (!isVideo) $item.animate({ left: -itemOffsetX, opacity: 0 }, itemAnimSettings); else
                if (isAndroid) $item.hide(); else
                    $item.animate({ left: -itemOffsetX }, itemAnimSettings); $meta.animate({ left: metaOffsetX, opacity: 0 }, { duration: options.itemsAnimateOutSpeed, easing: 'easeOutQuad', complete: AnimateComplete }); function AnimateComplete() { $bg.animate({ opacity: 0 }, { duration: options.bgFadeOutSpeed, complete: function () { $slide.hide(); } }); if (typeof onComplete != 'undefined') onComplete(); }
        }
    } var methods = { init: Initialize }; $.fn.awesomeSlider = function (options) { if (methods[options]) { return methods[method].apply(this, Array.prototype.slice.call(arguments, 1)); } else if (typeof options === 'object' || !options) { var settings = $.extend({}, defaults, options); return this.each(function () { methods.init.call($(this), settings); }); } else { $.error('Method ' + options + ' does not exist on jQuery.awesomeSlider'); } };
})(jQuery); var Froogaloop = function () { function e(a) { return new e.fn.init(a) } function h(a, c, b) { if (!b.contentWindow.postMessage) return !1; var f = b.getAttribute("src").split("?")[0], a = JSON.stringify({ method: a, value: c }); "//" === f.substr(0, 2) && (f = window.location.protocol + f); b.contentWindow.postMessage(a, f) } function j(a) { var c, b; try { c = JSON.parse(a.data), b = c.event || c.method } catch (f) { } "ready" == b && !i && (i = !0); if (a.origin != k) return !1; var a = c.value, e = c.data, g = "" === g ? null : c.player_id; c = g ? d[g][b] : d[b]; b = []; if (!c) return !1; void 0 !== a && b.push(a); e && b.push(e); g && b.push(g); return 0 < b.length ? c.apply(null, b) : c.call() } function l(a, c, b) { b ? (d[b] || (d[b] = {}), d[b][a] = c) : d[a] = c } var d = {}, i = !1, k = ""; e.fn = e.prototype = { element: null, init: function (a) { "string" === typeof a && (a = document.getElementById(a)); this.element = a; a = this.element.getAttribute("src"); "//" === a.substr(0, 2) && (a = window.location.protocol + a); for (var a = a.split("/"), c = "", b = 0, f = a.length; b < f; b++) { if (3 > b) c += a[b]; else break; 2 > b && (c += "/") } k = c; return this }, api: function (a, c) { if (!this.element || !a) return !1; var b = this.element, f = "" !== b.id ? b.id : null, d = !c || !c.constructor || !c.call || !c.apply ? c : null, e = c && c.constructor && c.call && c.apply ? c : null; e && l(a, e, f); h(a, d, b); return this }, addEvent: function (a, c) { if (!this.element) return !1; var b = this.element, d = "" !== b.id ? b.id : null; l(a, c, d); "ready" != a ? h("addEventListener", a, b) : "ready" == a && i && c.call(null, d); return this }, removeEvent: function (a) { if (!this.element) return !1; var c = this.element, b; a: { if ((b = "" !== c.id ? c.id : null) && d[b]) { if (!d[b][a]) { b = !1; break a } d[b][a] = null } else { if (!d[a]) { b = !1; break a } d[a] = null } b = !0 } "ready" != a && b && h("removeEventListener", a, c) } }; e.fn.init.prototype = e.fn; window.addEventListener ? window.addEventListener("message", j, !1) : window.attachEvent("onmessage", j); return window.Froogaloop = window.$f = e }();